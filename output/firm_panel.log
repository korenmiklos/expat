-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Users/koren/Google Drive/Research/expat/research_design/talk/outp
> ut/firm_panel.log
  log type:  text
 opened on:  12 Jan 2019, 12:31:22

. 
. use temp/balance-small

. collapse (max) firm_death=year, by(frame_id)

. tempfile sample

. save `sample', replace
(note: file /var/folders/7b/svcv81g94n3fm6nrj7ckr15c0000gn/T//St20013.000001 no
> t found)
file /var/folders/7b/svcv81g94n3fm6nrj7ckr15c0000gn/T//St20013.000001 saved

. 
. use temp/manager_panel, clear

. 
. * only keep sample firms
. merge m:1 frame_id using `sample', keep(match) nogen

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                         1,656,319  
    -----------------------------------------

. drop if year>firm_death
(245,822 observations deleted)

. 
. do fill_in_ceo

. tab pos5

       pos5 |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    147,670       15.81       15.81
          1 |    464,510       49.73       65.53
          2 |    151,354       16.20       81.74
          3 |    170,615       18.26      100.00
------------+-----------------------------------
      Total |    934,149      100.00

. gen ceo = (pos5==1) if !missing(pos5)
(476,348 missing values generated)

. 
. *Amennyiben egy személy egy cégnél egy évben többször szerepelt, és ceo is vo
> lt, esetében a ceo pos5 megtartása
. duplicates tag frame_id manager_id year, gen(manager_duplicate)

Duplicates in terms of frame_id manager_id year

. 
. bys frame_id manager_id year: egen manager_ceo = max(ceo)
(469178 missing values generated)

. drop if manager_duplicate>0 & (manager_ceo==1) & !(ceo==1)
(7,483 observations deleted)

. drop manager_duplicate

. 
. * before all the cleaning
. tab ceo, miss

        ceo |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    464,244       33.09       33.09
          1 |    464,510       33.11       66.20
          . |    474,260       33.80      100.00
------------+-----------------------------------
      Total |  1,403,014      100.00

. count if missing(ceo)
  474,260

. scalar missing_ceo_before = r(N)

. 
. *Duplikációk összeejtése - innentől egy személy egyszer szerepel egy vállalat
> i évben
. collapse (firstnm) person_foreign (max) ceo, by(frame_id manager_id year)

. 
. 
. *Pos5 húzások előkészítése
. bys frame_id year: gen man_number=_N

. *bys frame_id year: egen ceo_number=total(cond(pos5==1,pos5,.))
. bys frame_id year: egen ceo_exist=max(ceo)
(42286 missing values generated)

. 
. *Egy menedzseres cégeknél, ha nincs ceo, a menedzser ceo-vá kinevezése
. count if ceo==1
  464,510

. scalar temp=r(N)

.         replace ceo=1 if man_number==1&ceo_exist!=1
(23,089 real changes made)

. count if ceo==1
  487,599

. scalar no_other_manager = r(N)-temp

. 
. *Ceo_exist újraszámolása, mert változott a pos5-ok száma
. drop ceo_exist

. bys frame_id year: egen ceo_exist=max(ceo)
(35989 missing values generated)

. 
. egen company_manager=group(frame_id manager_id)

. xtset company_manager year
       panel variable:  company_manager (unbalanced)
        time variable:  year, 1946 to 2016, but with gaps
                delta:  1 unit

. 
. * this is on purpose, so that any chang is captured
. gen change = ceo!=ceo[_n-1] 

. /* index spells within a relationship so that
> 
> ceo             = 1 1 1 . . 0 0
> spell           = 1 1 1 2 2 3 3
> spell_year      = 1 2 3 1 2 1 2
> 
> */
. bys company_manager: gen spell = sum(change)

. sort company_manager spell year

. by company_manager spell: gen spell_year = _n

. by company_manager spell: gen spell_length = _N

. 
. 
. xtset company_manager year
       panel variable:  company_manager (unbalanced)
        time variable:  year, 1946 to 2016, but with gaps
                delta:  1 unit

. tempvar ceo_prev ceo_next

. gen `ceo_prev' = cond(spell_year==1, L.ceo, .)
(1,380,460 missing values generated)

. gen `ceo_next' = cond(spell_year==spell_length, F.ceo, .)
(1,379,529 missing values generated)

. egen ceo_prev = mean(`ceo_prev'), by(company_manager spell)
(1326092 missing values generated)

. egen ceo_next = mean(`ceo_next'), by(company_manager spell)
(1308240 missing values generated)

. drop `ceo_prev' `ceo_next'

. 
. 
. * type of changes
. tab ceo_prev ceo if spell_year==1, miss

           |            (max) ceo
  ceo_prev |         0          1          . |     Total
-----------+---------------------------------+----------
         0 |         0      8,565      1,547 |    10,112 
         1 |     3,873          0      1,792 |     5,665 
         . |    81,552     76,390     94,806 |   252,748 
-----------+---------------------------------+----------
     Total |    85,425     84,955     98,145 |   268,525 


. tab ceo ceo_next if spell_year==spell_length, miss

           |             ceo_next
 (max) ceo |         0          1          . |     Total
-----------+---------------------------------+----------
         0 |         0      8,565     76,860 |    85,425 
         1 |     3,873          0     81,082 |    84,955 
         . |     1,912      2,358     93,875 |    98,145 
-----------+---------------------------------+----------
     Total |     5,785     10,923    251,817 |   268,525 


. assert ceo!=ceo_next if !missing(ceo)

. assert ceo!=ceo_prev if !missing(ceo)

. 
. * descriptives
. tab spell_length if missing(ceo) & ceo_prev==0 & ceo_next==0

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         38        9.48        9.48
          2 |         46       11.47       20.95
          3 |         45       11.22       32.17
          4 |         52       12.97       45.14
          5 |         70       17.46       62.59
          6 |         30        7.48       70.07
          7 |         42       10.47       80.55
          8 |         32        7.98       88.53
         10 |         20        4.99       93.52
         12 |         12        2.99       96.51
         14 |         14        3.49      100.00
------------+-----------------------------------
      Total |        401      100.00

. tab spell_length if missing(ceo) & ceo_prev==0 & ceo_next==1

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         20        8.58        8.58
          2 |         16        6.87       15.45
          3 |         24       10.30       25.75
          4 |         12        5.15       30.90
          5 |         30       12.88       43.78
          6 |         18        7.73       51.50
          7 |         35       15.02       66.52
          8 |         16        6.87       73.39
          9 |         18        7.73       81.12
         10 |         20        8.58       89.70
         11 |         11        4.72       94.42
         13 |         13        5.58      100.00
------------+-----------------------------------
      Total |        233      100.00

. tab spell_length if missing(ceo) & ceo_prev==1 & ceo_next==0

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         13       13.54       13.54
          2 |         12       12.50       26.04
          3 |          9        9.38       35.42
          4 |          8        8.33       43.75
          5 |         15       15.62       59.38
         13 |         39       40.62      100.00
------------+-----------------------------------
      Total |         96      100.00

. tab spell_length if missing(ceo) & ceo_prev==1 & ceo_next==1

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         87        8.61        8.61
          2 |        138       13.66       22.28
          3 |         90        8.91       31.19
          4 |         88        8.71       39.90
          5 |         90        8.91       48.81
          6 |         78        7.72       56.53
          7 |        119       11.78       68.32
          8 |         56        5.54       73.86
          9 |         54        5.35       79.21
         10 |         70        6.93       86.14
         11 |         33        3.27       89.41
         12 |         48        4.75       94.16
         13 |         13        1.29       95.45
         14 |         28        2.77       98.22
         18 |         18        1.78      100.00
------------+-----------------------------------
      Total |      1,010      100.00

. 
. 
. *Pos5 kihúzása, ha egy, kettő, három, négy vagy öt évnyi lyuk van, ugyanazon 
> személy ugyanazon cégnél történő ceo tevékenysége között
. tab ceo_prev ceo_next if missing(ceo)

           |       ceo_next
  ceo_prev |         0          1 |     Total
-----------+----------------------+----------
         0 |       401        233 |       634 
         1 |        96      1,010 |     1,106 
-----------+----------------------+----------
     Total |       497      1,243 |     1,740 


. 
. count if ceo==1
  487,599

. scalar temp=r(N)

.         replace ceo = ceo_prev if ceo_prev==ceo_next & !missing(ceo_prev) & m
> issing(ceo) & spell_length<=5
(744 real changes made)

. count if ceo==1
  488,092

. scalar fill_gap_5 = r(N)-temp

. drop ceo_exist

. bys frame_id year: egen ceo_exist=max(ceo)
(35532 missing values generated)

. 
. *Pos5 kihúzása három, kettő vagy egy évig, ha nincs más ceo és több menedzser
>  van a cégnél - itt marad az eltolt ceo_exist, mert kicsit más a logika
. count if ceo==1
  488,092

. scalar temp=r(N)

.         replace ceo = 1 if (ceo_prev==1) & missing(ceo) & (ceo_exist==0) & sp
> ell_year<=3
(195 real changes made)

. count if ceo==1
  488,287

. scalar fill_forward_3 = r(N)-temp

. drop ceo_exist

. bys frame_id year: egen ceo_exist=max(ceo)
(35532 missing values generated)

. 
. * one year back
. count if ceo==1
  488,287

. scalar temp=r(N)

.         replace ceo = 1 if (ceo_next==1) & missing(ceo) & (ceo_exist==0) & sp
> ell_year==spell_length
(177 real changes made)

. count if ceo==1
  488,464

. scalar fill_backward_1 = r(N)-temp

. 
. * after all the cleaning
. tab ceo, miss

  (max) ceo |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    446,008       31.94       31.94
          1 |    488,464       34.98       66.93
          . |    461,765       33.07      100.00
------------+-----------------------------------
      Total |  1,396,237      100.00

. count if missing(ceo)
  461,765

. scalar missing_ceo_after = r(N)

. 
end of do-file

. 
. *Cégalapítás éve
. bys frame_id: egen first_year=min(year)

. egen id=group(frame_id manager_id)

. 
. *Adott ceo első megjelenése és utolsó kilépése
. egen enter_year=min(cond(ceo==1,year,.)), by(frame_id manager_id)
(823951 missing values generated)

. egen exit_year=max(cond(ceo==1,year,.)), by(frame_id manager_id)
(823951 missing values generated)

. xtset id year
       panel variable:  id (unbalanced)
        time variable:  year, 1946 to 2016, but with gaps
                delta:  1 unit

. egen first_exit_year = min(cond(ceo==1 & F.ceo!=1, year, .)), by(frame_id man
> ager_id)
(823951 missing values generated)

. 
. * FIXME: keep stats on non-CEO managers
. keep if ceo==1
(907,773 observations deleted)

. 
. gen int tenure = year - enter_year

. gen int firm_age = year - first_year

. ren person_foreign expat

. 
. * flag founders
. gen byte founder = (first_year==enter_year)

. drop if year<enter_year | year>first_exit_year
(22,001 observations deleted)

. 
. * count number of CEOs
. preserve

.         collapse (count) N_ceos = expat, by(frame_id year)

.         save temp/N_ceos, replace
file temp/N_ceos.dta saved

. restore

. 
. collapse (min) enter_year first_exit_year (firstnm) expat founder, by(frame_i
> d manager_id)

. 
. gen byte spell = 1

. bysort frame_id (enter_year manager_id): replace spell =  cond(enter_year>ent
> er_year[_n-1],spell[_n-1]+1,spell[_n-1]) if _n>1
(48,727 real changes made)

. 
. egen max_expat = max(expat), by(frame_id spell)

. tempvar lag_expat

. gen `lag_expat' = .
(83,410 missing values generated)

. bysort frame_id (enter_year manager_id): replace `lag_expat' = max_expat[_n-1
> ] if _n>1 & enter_year>enter_year[_n-1]
(35121 real changes made)

. egen lag_expat = mean(`lag_expat'), by(frame_id spell)
(34683 missing values generated)

. assert lag_expat==0 | lag_expat==1 | (missing(lag_expat) & spell==1)

. 
. compress
  variable enter_year was float now int
  variable first_exit_year was float now int
  variable max_expat was float now byte
  variable __000000 was float now byte
  variable lag_expat was float now byte
  variable frame_id was str12 now str10
  variable manager_id was str18 now str17
  (1,334,560 bytes saved)

. save_all_to_json

. save temp/firm_ceo_panel, replace
file temp/firm_ceo_panel.dta saved

. log close
      name:  <unnamed>
       log:  /Users/koren/Google Drive/Research/expat/research_design/talk/outp
> ut/firm_panel.log
  log type:  text
 closed on:  12 Jan 2019, 12:32:35
-------------------------------------------------------------------------------
