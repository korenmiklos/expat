-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Users/koren/Google Drive/Research/expat/research_design/talk/outp
> ut/firm_panel.log
  log type:  text
 opened on:   7 Jan 2019, 17:48:09

. 
. use temp/balance-small

. collapse (max) firm_death=year, by(frame_id)

. tempfile sample

. save `sample', replace
(note: file /var/folders/f4/7drmhl1d5kj3wp1r33jvx32m0000gn/T//St14723.000001 no
> t found)
file /var/folders/f4/7drmhl1d5kj3wp1r33jvx32m0000gn/T//St14723.000001 saved

. 
. use temp/manager_panel, clear

. 
. * only keep sample firms
. merge m:1 frame_id using `sample', keep(match) nogen

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                         1,675,679  
    -----------------------------------------

. drop if year>firm_death
(249,002 observations deleted)

. 
. do fill_in_ceo

. tab pos5

       pos5 |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    151,818       16.05       16.05
          1 |    467,790       49.46       65.52
          2 |    153,793       16.26       81.78
          3 |    172,318       18.22      100.00
------------+-----------------------------------
      Total |    945,719      100.00

. gen ceo = (pos5==1) if !missing(pos5)
(480,958 missing values generated)

. 
. *Amennyiben egy személy egy cégnél egy évben többször szerepelt, és ceo is vo
> lt, esetében a ceo pos5 megtartása
. duplicates tag frame_id manager_id year, gen(manager_duplicate)

Duplicates in terms of frame_id manager_id year

. 
. bys frame_id manager_id year: egen manager_ceo = max(ceo)
(473648 missing values generated)

. drop if manager_duplicate>0 & (manager_ceo==1) & !(ceo==1)
(7,582 observations deleted)

. drop manager_duplicate

. 
. * before all the cleaning
. tab ceo, miss

        ceo |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    472,503       33.30       33.30
          1 |    467,790       32.96       66.26
          . |    478,802       33.74      100.00
------------+-----------------------------------
      Total |  1,419,095      100.00

. count if missing(ceo)
  478,802

. scalar missing_ceo_before = r(N)

. 
. *Duplikációk összeejtése - innentől egy személy egyszer szerepel egy vállalat
> i évben
. collapse (firstnm) person_foreign (max) ceo, by(frame_id manager_id year)

. 
. 
. *Pos5 húzások előkészítése
. bys frame_id year: gen man_number=_N

. *bys frame_id year: egen ceo_number=total(cond(pos5==1,pos5,.))
. bys frame_id year: egen ceo_exist=max(ceo)
(41072 missing values generated)

. 
. *Egy menedzseres cégeknél, ha nincs ceo, a menedzser ceo-vá kinevezése
. count if ceo==1
  467,790

. scalar temp=r(N)

.         replace ceo=1 if man_number==1&ceo_exist!=1
(22,987 real changes made)

. count if ceo==1
  490,777

. scalar no_other_manager = r(N)-temp

. 
. *Ceo_exist újraszámolása, mert változott a pos5-ok száma
. drop ceo_exist

. bys frame_id year: egen ceo_exist=max(ceo)
(34841 missing values generated)

. 
. egen company_manager=group(frame_id manager_id)

. xtset company_manager year
       panel variable:  company_manager (unbalanced)
        time variable:  year, 1946 to 2016, but with gaps
                delta:  1 unit

. 
. * this is on purpose, so that any chang is captured
. gen change = ceo!=ceo[_n-1] 

. /* index spells within a relationship so that
> 
> ceo             = 1 1 1 . . 0 0
> spell           = 1 1 1 2 2 3 3
> spell_year      = 1 2 3 1 2 1 2
> 
> */
. bys company_manager: gen spell = sum(change)

. sort company_manager spell year

. by company_manager spell: gen spell_year = _n

. by company_manager spell: gen spell_length = _N

. 
. 
. xtset company_manager year
       panel variable:  company_manager (unbalanced)
        time variable:  year, 1946 to 2016, but with gaps
                delta:  1 unit

. tempvar ceo_prev ceo_next

. gen `ceo_prev' = cond(spell_year==1, L.ceo, .)
(1,396,273 missing values generated)

. gen `ceo_next' = cond(spell_year==spell_length, F.ceo, .)
(1,395,389 missing values generated)

. egen ceo_prev = mean(`ceo_prev'), by(company_manager spell)
(1341223 missing values generated)

. egen ceo_next = mean(`ceo_next'), by(company_manager spell)
(1323624 missing values generated)

. drop `ceo_prev' `ceo_next'

. 
. 
. * type of changes
. tab ceo_prev ceo if spell_year==1, miss

           |            (max) ceo
  ceo_prev |         0          1          . |     Total
-----------+---------------------------------+----------
         0 |         0      8,605      1,610 |    10,215 
         1 |     3,886          0      1,857 |     5,743 
         . |    83,284     77,292     95,530 |   256,106 
-----------+---------------------------------+----------
     Total |    87,170     85,897     98,997 |   272,064 

. tab ceo ceo_next if spell_year==spell_length, miss

           |             ceo_next
 (max) ceo |         0          1          . |     Total
-----------+---------------------------------+----------
         0 |         0      8,605     78,565 |    87,170 
         1 |     3,886          0     82,011 |    85,897 
         . |     1,947      2,404     94,646 |    98,997 
-----------+---------------------------------+----------
     Total |     5,833     11,009    255,222 |   272,064 

. assert ceo!=ceo_next if !missing(ceo)

. assert ceo!=ceo_prev if !missing(ceo)

. 
. * descriptives
. tab spell_length if missing(ceo) & ceo_prev==0 & ceo_next==0

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         38        9.18        9.18
          2 |         50       12.08       21.26
          3 |         45       10.87       32.13
          4 |         56       13.53       45.65
          5 |         75       18.12       63.77
          6 |         30        7.25       71.01
          7 |         42       10.14       81.16
          8 |         32        7.73       88.89
         10 |         20        4.83       93.72
         12 |         12        2.90       96.62
         14 |         14        3.38      100.00
------------+-----------------------------------
      Total |        414      100.00

. tab spell_length if missing(ceo) & ceo_prev==0 & ceo_next==1

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         20        8.51        8.51
          2 |         18        7.66       16.17
          3 |         24       10.21       26.38
          4 |         12        5.11       31.49
          5 |         30       12.77       44.26
          6 |         18        7.66       51.91
          7 |         35       14.89       66.81
          8 |         16        6.81       73.62
          9 |         18        7.66       81.28
         10 |         20        8.51       89.79
         11 |         11        4.68       94.47
         13 |         13        5.53      100.00
------------+-----------------------------------
      Total |        235      100.00

. tab spell_length if missing(ceo) & ceo_prev==1 & ceo_next==0

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         14       14.00       14.00
          2 |         12       12.00       26.00
          3 |         12       12.00       38.00
          4 |          8        8.00       46.00
          5 |         15       15.00       61.00
         13 |         39       39.00      100.00
------------+-----------------------------------
      Total |        100      100.00

. tab spell_length if missing(ceo) & ceo_prev==1 & ceo_next==1

spell_lengt |
          h |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |         90        8.94        8.94
          2 |        140       13.90       22.84
          3 |         87        8.64       31.48
          4 |         96        9.53       41.01
          5 |         95        9.43       50.45
          6 |         78        7.75       58.19
          7 |        119       11.82       70.01
          8 |         56        5.56       75.57
          9 |         54        5.36       80.93
         10 |         70        6.95       87.88
         11 |         33        3.28       91.16
         12 |         48        4.77       95.93
         13 |         13        1.29       97.22
         14 |         28        2.78      100.00
------------+-----------------------------------
      Total |      1,007      100.00

. 
. 
. *Pos5 kihúzása, ha egy, kettő, három, négy vagy öt évnyi lyuk van, ugyanazon 
> személy ugyanazon cégnél történő ceo tevékenysége között
. tab ceo_prev ceo_next if missing(ceo)

           |       ceo_next
  ceo_prev |         0          1 |     Total
-----------+----------------------+----------
         0 |       414        235 |       649 
         1 |       100      1,007 |     1,107 
-----------+----------------------+----------
     Total |       514      1,242 |     1,756 

. 
. count if ceo==1
  490,777

. scalar temp=r(N)

.         replace ceo = ceo_prev if ceo_prev==ceo_next & !missing(ceo_prev) & m
> issing(ceo) & spell_length<=5
(772 real changes made)

. count if ceo==1
  491,285

. scalar fill_gap_5 = r(N)-temp

. drop ceo_exist

. bys frame_id year: egen ceo_exist=max(ceo)
(34356 missing values generated)

. 
. *Pos5 kihúzása három, kettő vagy egy évig, ha nincs más ceo és több menedzser
>  van a cégnél - itt marad az eltolt ceo_exist, mert kicsit más a logika
. count if ceo==1
  491,285

. scalar temp=r(N)

.         replace ceo = 1 if (ceo_prev==1) & missing(ceo) & (ceo_exist==0) & sp
> ell_year<=3
(197 real changes made)

. count if ceo==1
  491,482

. scalar fill_forward_3 = r(N)-temp

. drop ceo_exist

. bys frame_id year: egen ceo_exist=max(ceo)
(34356 missing values generated)

. 
. * one year back
. count if ceo==1
  491,482

. scalar temp=r(N)

.         replace ceo = 1 if (ceo_next==1) & missing(ceo) & (ceo_exist==0) & sp
> ell_year==spell_length
(178 real changes made)

. count if ceo==1
  491,660

. scalar fill_backward_1 = r(N)-temp

. 
. * after all the cleaning
. tab ceo, miss

  (max) ceo |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |    454,301       32.17       32.17
          1 |    491,660       34.81       66.98
          . |    466,270       33.02      100.00
------------+-----------------------------------
      Total |  1,412,231      100.00

. count if missing(ceo)
  466,270

. scalar missing_ceo_after = r(N)

. 
end of do-file

. 
. *Cégalapítás éve
. bys frame_id: egen first_year=min(year)

. egen id=group(frame_id manager_id)

. 
. *Adott ceo első megjelenése és utolsó kilépése
. egen enter_year=min(cond(ceo==1,year,.)), by(frame_id manager_id)
(835967 missing values generated)

. egen exit_year=max(cond(ceo==1,year,.)), by(frame_id manager_id)
(835967 missing values generated)

. xtset id year
       panel variable:  id (unbalanced)
        time variable:  year, 1946 to 2016, but with gaps
                delta:  1 unit

. egen first_exit_year = min(cond(ceo==1 & F.ceo!=1, year, .)), by(frame_id man
> ager_id)
(835967 missing values generated)

. 
. * FIXME: keep stats on non-CEO managers
. keep if ceo==1
(920,571 observations deleted)

. 
. gen int tenure = year - enter_year

. gen int firm_age = year - first_year

. ren person_foreign expat

. 
. * flag founders
. gen byte founder = (first_year==enter_year)

. drop if year<enter_year | year>first_exit_year
(22,113 observations deleted)

. 
. * count number of CEOs
. preserve

.         collapse (count) N_ceos = expat, by(frame_id year)

.         save temp/N_ceos, replace
file temp/N_ceos.dta saved

. restore

. 
. collapse (min) enter_year first_exit_year (firstnm) expat founder, by(frame_i
> d manager_id)

. 
. gen byte spell = 1

. bysort frame_id (enter_year manager_id): replace spell =  cond(enter_year>ent
> er_year[_n-1],spell[_n-1]+1,spell[_n-1]) if _n>1
(49,283 real changes made)

. 
. egen max_expat = max(expat), by(frame_id spell)

. tempvar lag_expat

. gen `lag_expat' = .
(84,346 missing values generated)

. bysort frame_id (enter_year manager_id): replace `lag_expat' = max_expat[_n-1
> ] if _n>1 & enter_year>enter_year[_n-1]
(35474 real changes made)

. egen lag_expat = mean(`lag_expat'), by(frame_id spell)
(35063 missing values generated)

. assert lag_expat==0 | lag_expat==1 | (missing(lag_expat) & spell==1)

. 
. compress
  variable enter_year was float now int
  variable first_exit_year was float now int
  variable max_expat was float now byte
  variable __000000 was float now byte
  variable lag_expat was float now byte
  variable frame_id was str12 now str10
  variable manager_id was str18 now str17
  (1,349,536 bytes saved)

. save_all_to_json

. save temp/firm_ceo_panel, replace
file temp/firm_ceo_panel.dta saved

. log close
      name:  <unnamed>
       log:  /Users/koren/Google Drive/Research/expat/research_design/talk/outp
> ut/firm_panel.log
  log type:  text
 closed on:   7 Jan 2019, 17:49:00
-------------------------------------------------------------------------------
